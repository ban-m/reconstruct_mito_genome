#!/bin/bash
#$ -S /bin/bash
#$ -N dotplot
#$ -cwd
#$ -pe smp 1
#$ -e ./logfiles/dotplot_eachother.log
#$ -o ./logfiles/dotplot_eachother.out
#$ -V
#$ -m e
# -M banmasutani@gmail.com ## To send a mail when ended
# -t 1:n ## For array job
## "-S" specifies which shell do the script run on.
## "-N" specifies the name of the job(should NOT be TEMPLATE).
## "-cwd" means the script run on the current directly, not on $HOME.
## "-pe smp N" specifies the number of the core the script requires.
## with "-e [path]", the stderr would be written in [path], not ${HOME}/$JOB_NUMBER
## with "-o [path]" is the same as "-e", except for stdout.
## with "-V", all envirnmental variables would be inherited.
## "with -m e", a mail would be sent if the job halt with an error.
## For more detail, see `man qsub`

DATA=/grid/ban-m/arabidopsis_thaliana/sequel/guided_asm/racon
CANU=${DATA}/canu.5.fa
FLYE=${DATA}/flye.5.fa
WTDBG=${DATA}/wtdbg.5.fa
RA=${DATA}/ra.5.fa
FALCON=${DATA}/falcon.5.fa

mkdir -p ./png/dotplots/
function dotplot(){
    java -cp ~/work/gepard/Gepard-1.40.jar org.gepard.client.cmdline.CommandLine \
          -seq1 $1 \
          -seq2 $2 \
          -matrix ~/work/gepard/ednaorig.mat \
          -outfile $3
}

mkdir -p ./png/dotplots_racon/
for seq1 in $CANU $FLYE $WTDBG $RA $FALCON
do
    for seq2 in $CANU $FLYE $WTDBG $RA $FALCON
    do
        n1=${seq1%.5.fa}
        n1=${n1##*/}
        n2=${seq2%.5.fa}
        n2=${n2##*/}
        echo $n1 $n2
        dotplot $seq1 $seq2 ./png/dotplots_racon/${n1}_${n2}_dotplot.png
    done
done
