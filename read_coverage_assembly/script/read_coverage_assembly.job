#!/bin/bash
#$ -S /bin/bash
#$ -N ReadCoverageAsm
#$ -cwd
#$ -pe smp 12
#$ -e ./logfiles/read_coverage_assembly.log
#$ -o ./logfiles/read_coverage_assembly.out
#$ -V
#$ -m e
# -M banmasutani@gmail.com ## To send a mail when ended
# -t 1:n ## For array job

READ=$1
OUTPUT_DIR=$2
OUTPUT_PREFIX=$3
SEQUENCER=$4

echo -e "Read:${READ} OUTPUT_DIR:${OUTPUT_DIR} OUTPUT_PREFIX:${OUTPUT_PREFIX}"
echo -e "Sequencer is ${SEQUENCER}"

set -eu

function canu_assemble () {
    canu \
	    genomeSize=1M \
        gridEngineMemoryOption="-l mem_free=MEMORY" \
        gridOptions="-S /bin/bash -V" \
        -d $1 -p $2 $3 $4
}


## Variables to be used
ALL_VS_ALL=${OUTPUT_DIR}/reads_all_vs_all.paf
EXTRACTED_READS=${OUTPUT_DIR}/reads_extracted.fa

## Mapping
if [ ${SEQUENCER} = "ONT" ]
then
    minimap2 -t 12 -X -xava-ont ${READ}  ${READ} > ${ALL_VS_ALL}
    cat ${ALL_VS_ALL} | cut -f 1 | sort | uniq -c | \
        cargo run --release -- ${READ} > ${EXTRACTED_READS}
    canu_assemble ${OUTPUT_DIR} ${OUTPUT_PREFIX} -nanopore-raw ${EXTRACTED_READS}
elif [ ${SEQUENCER} = "PacBio" ]
then
    minialign -t 12 -X -xpacbio -O paf ${READ} > ${ALL_VS_ALL}
    cat ${ALL_VS_ALL} | cut -f 1 | sort | uniq -c | \
        cargo run --release -- ${READ} > ${EXTRACTED_READS}
    canu_assemble ${OUTPUT_DIR} ${OUTPUT_PREFIX} -pacbio-raw ${EXTRACTED_READS}
else
    echo -e "Invalid Sequencer name:${SEQUENCER}. Please enter ONT / PacBio."
    echo -e "Exit with status 1"
    exit 1
fi
